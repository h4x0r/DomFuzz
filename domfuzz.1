.TH DOMFUZZ 1 "2024" "domfuzz 0.1.1" "Domain Fuzzing Tool"
.SH NAME
domfuzz \- generate domain name variations using typosquatting techniques
.SH SYNOPSIS
.B domfuzz
[\fIOPTIONS\fR] \fIDOMAIN\fR
.SH DESCRIPTION
.B domfuzz
is a comprehensive domain name variation generator that uses advanced typosquatting techniques to create potential malicious domain variations. It implements 22 different transformation algorithms organized into logical categories to simulate how attackers might create lookalike domains for phishing, brand impersonation, and other malicious activities.

The tool operates in two modes: one-transformation mode (default) where each algorithm is applied individually, and combo mode where transformations are chained together to create complex variations. Results can include similarity scoring, domain availability checking, and filtering by registration status.

.SH OPTIONS
.TP
.B \-t, \-\-transformation \fITRANSFORMATION\fR
Specify transformations to enable (comma-separated). Use 'all' for all transformations. If not specified, the lookalike bundle is enabled by default.
.TP
.B \-n, \-\-max\-variations \fINUMBER\fR
Limit the maximum number of variations to output.
.TP
.B \-s, \-\-check\-status
Check domain availability status (requires network connectivity).
.TP
.B \-r, \-\-only\-registered
Output only domains that are registered (not available). Implies \-\-check\-status.
.TP
.B \-\-dictionary \fIFILE\fR
Path to dictionary file for combosquatting transformations.
.TP
.B \-1, \-\-one\-transformation
Run transformations in combo mode where multiple transformations are chained together on the same domain to create more complex variations. By default, domfuzz runs in one-transformation mode where each transformation is applied individually.
.TP
.B \-v, \-\-verbose
Enable verbose output showing transformation details and generation process.
.TP
.B \-\-similarity
Calculate and display similarity scores for generated variations.
.TP
.B \-\-min\-similarity \fITHRESHOLD\fR
Filter results to minimum similarity threshold (0.0-1.0).
.TP
.B \-h, \-\-help
Print help information.

.SH TRANSFORMATION ALGORITHMS
.B domfuzz
implements 22 different transformation algorithms organized into logical categories:

.SS Character-Level Transformations
Advanced character-level modifications that create visually similar domains:

.TP
.B 1337speak
Leetspeak (also known as "leet" or "1337") is a form of internet slang that replaces letters with visually similar numbers and symbols. This transformation simulates how attackers create typosquatting domains using character substitutions that are immediately recognizable to users but visually deceptive. The algorithm applies common internet culture replacements either individually or in realistic combinations.
.br
.br
\fBCharacter mappings:\fR
.br
• \fBo → 0\fR: The most common substitution, as zero and letter 'o' are nearly identical
.br
• \fBl → 1\fR: Lowercase 'l' and number '1' often appear identical in many fonts
.br
• \fBe → 3\fR: The number '3' resembles a backwards 'E'
.br
• \fBa → @\fR: The at-symbol contains the letter 'a' shape
.br
• \fBs → $\fR: The dollar sign resembles an 'S' with lines through it
.br
• \fBi → !\fR: Exclamation point resembles lowercase 'i' without the dot
.br
• \fBt → 7\fR: The number '7' can resemble a 't' in certain fonts
.br
• \fBg → 9\fR: The number '9' bears some resemblance to 'g'
.br
.br
\fBIntelligent application:\fR
.br
• Respects domain length (longer domains allow more substitutions)
.br
• Maximum 40% character substitution to maintain readability
.br
• Realistic spacing prevents consecutive substitutions in short domains
.br
• Prioritizes high-impact substitutions (o→0, l→1) for maximum visual similarity
.br
.br
\fBReal-world examples:\fR
.br
google.com → g00gle.com, g0ogle.com, goog1e.com, 9oogle.com
.br
amazon.com → amaz0n.com, @mazon.com, @m@z0n.com
.br
paypal.com → paypa1.com, p@ypal.com, p@yp@l.com
.br
microsoft.com → m!crosoft.com, micr0soft.com, micr0$0ft.com

.TP
.B misspelling
Comprehensive typing error simulation that models the most common mistakes users make when entering domain names. This transformation consolidates multiple error types into a single, realistic algorithm that respects natural typing patterns and constraints. It simulates both accidental errors (typos, slips) and cognitive errors (transpositions, substitutions).
.br
.br
\fBError types implemented:\fR
.br
• \fBCharacter deletion\fR: Accidentally skip a letter while typing
.br
• \fBCharacter insertion\fR: Accidentally hit an extra key or double-type
.br
• \fBCharacter transposition\fR: Swap two adjacent characters (very common error)
.br
• \fBCharacter substitution\fR: Hit a wrong key, often adjacent to correct key
.br
• \fBVowel swapping\fR: Confuse similar vowel sounds (a/e, o/u, i/e)
.br
• \fBKeyboard adjacent errors\fR: Hit keys physically next to the intended key
.br
.br
\fBIntelligent error modeling:\fR
.br
• Frequency-based error placement (more errors in middle of words)
.br
• Length-aware constraints (shorter domains get fewer errors)
.br
• Realistic error combinations (1-3 errors per domain maximum)
.br
• Position weighting (avoids errors at start/end of short domains)
.br
• QWERTY keyboard layout modeling for adjacent key errors
.br
.br
\fBReal-world examples:\fR
.br
google.com → googlle.com (double-l insertion), gogle.com (o deletion)
.br
amazon.com → amazno.com (transposition), amozon.com (a→o vowel swap)
.br
paypal.com → paypla.com (transposition), oaypal.com (adjacent key p→o)
.br
facebook.com → facbook.com (e deletion), faceboook.com (o insertion)
.br
microsoft.com → microsfot.com (transposition), microsift.com (o→i substitution)

.TP
.B fat-finger
Models accidental keypresses that occur when users type too quickly or press keys imprecisely. This transformation simulates the "fat finger" effect where users accidentally hit multiple keys or keys adjacent to their target. The algorithm focuses specifically on key repetition and insertion errors that result from imprecise finger placement or timing.
.br
.br
\fBError mechanisms:\fR
.br
• \fBCharacter doubling\fR: Hold key too long or press twice accidentally
.br
• \fBAdjacent key insertion\fR: Press extra key next to intended target
.br
• \fBMultiple adjacent errors\fR: Several finger placement errors in same domain
.br
• \fBTyping speed errors\fR: Errors that occur during fast typing
.br
.br
\fBQWERTY adjacency modeling:\fR
.br
• Horizontal adjacency: q↔w↔e↔r↔t↔y, a↔s↔d↔f↔g↔h, z↔x↔c↔v↔b↔n
.br
• Vertical adjacency: q↔a↔z, w↔s↔x, e↔d↔c, r↔f↔v, t↔g↔b, etc.
.br
• Diagonal adjacency: q↔s, w↔a↔d, e↔s↔f, etc.
.br
• Common mistakes: o↔p, l↔;, n↔m, etc.
.br
.br
\fBRealistic constraints:\fR
.br
• Prevents excessive repetition (max 2-3 repeated characters)
.br
• Limits adjacent errors to maintain readability
.br
• Frequency-based placement (more errors in frequently-hit keys)
.br
• Length-appropriate error density
.br
.br
\fBReal-world examples:\fR
.br
google.com → gooogle.com (o repetition), googgle.com (g repetition)
.br
amazon.com → amazoon.com (o doubling), amaozn.com (adjacent z→o)
.br
paypal.com → paypall.com (l doubling), paypakl.com (adjacent l→k)
.br
facebook.com → facebookk.com (k doubling), favebook.com (adjacent c→v)
.br
microsoft.com → microosoft.com (o doubling), microsofft.com (f doubling)

.TP
.B mixed-encodings
Advanced Unicode-based homograph attack that exploits visually identical characters from different writing systems to create deceptive domains. This is one of the most sophisticated and dangerous transformation types, as the resulting domains are virtually indistinguishable from legitimate ones in most fonts and browsers. The technique leverages the vast Unicode character set to find lookalike characters from various scripts.
.br
.br
\fBHomograph attack vectors:\fR
.br
• \fBCyrillic substitutions\fR: Latin letters replaced with identical Cyrillic letters
.br
• \fBGreek substitutions\fR: Latin letters replaced with identical Greek letters
.br
• \fBMultiple script mixing\fR: Combining different writing systems in one domain
.br
• \fBExtended Unicode\fR: Less common but visually identical characters
.br
• \fBPunycode encoding\fR: ASCII-compatible encoding revealing the attack
.br
.br
\fBCommon character substitutions:\fR
.br
• \fBLatin 'a' (U+0061) → Cyrillic 'а' (U+0430)\fR: Identical appearance
.br
• \fBLatin 'o' (U+006F) → Cyrillic 'о' (U+043E)\fR: Perfect visual match
.br
• \fBLatin 'e' (U+0065) → Cyrillic 'е' (U+0435)\fR: Indistinguishable
.br
• \fBLatin 'p' (U+0070) → Cyrillic 'р' (U+0440)\fR: Identical shape
.br
• \fBLatin 'o' (U+006F) → Greek 'ο' (U+03BF)\fR: Same visual representation
.br
• \fBLatin 'c' (U+0063) → Cyrillic 'с' (U+0441)\fR: Perfect lookalike
.br
.br
\fBTechnical implementation:\fR
.br
• Browser display: Domains appear identical to users
.br
• Punycode encoding: xn--prefix reveals non-ASCII characters
.br
• DNS resolution: Works normally, pointing to attacker infrastructure
.br
• Certificate validation: Browsers may show warnings for mixed scripts
.br
• Detection difficulty: Extremely hard for users to detect visually
.br
.br
\fBReal-world examples:\fR
.br
google.com → gооgle.com (Cyrillic о characters, Punycode: xn--ggle-55da0q)
.br
paypal.com → pаypal.com (Cyrillic а, Punycode: xn--pypal-4ve)
.br
amazon.com → аmazon.com (Cyrillic а, Punycode: xn--mazon-3ve)
.br
apple.com → аpple.com (Cyrillic а, Punycode: xn--pple-43d)
.br
microsoft.com → microsοft.com (Greek ο, Punycode: xn--microsooft-99b)

.TP
.B bitsquatting
Single bit-flip transformations simulating hardware errors or memory corruption. Each character's ASCII representation has one bit flipped to create subtle variations.
.br
Examples: google.com → gmogle.com (bit flip in 'o'), eoogle.com (bit flip in 'g')

.SS Phonetic/Semantic Transformations
Sound and meaning-based variations:

.TP
.B homophones
Sound-alike word substitution using words with similar phonetic pronunciation but different spelling.
.br
Examples: google.com → gogle.com, secure.com → sekure.com, site.com → sight.com

.TP
.B cognitive
Semantic word confusion using words that are conceptually similar or commonly confused in meaning.
.br
Examples: secure.com → safety.com, login.com → signin.com, shop.com → store.com

.TP
.B singular-plural
Transformation between singular and plural forms of words within domain names.
.br
Examples: book.com → books.com, files.com → file.com, service.com → services.com

.SS Number/Word Substitution
Numeric and word form variations:

.TP
.B cardinal-substitution
Substitution of cardinal numbers with their word equivalents and vice versa (1→one, two→2).
.br
Examples: one.com → 1.com, 2checkout.com → twocheckout.com, four20.com → 420.com

.TP
.B ordinal-substitution
Substitution of ordinal numbers with their written forms (1st→first, 2nd→second).
.br
Examples: 1st.com → first.com, 2ndchance.com → secondchance.com

.SS Structure Manipulation
Domain structure and format changes:

.TP
.B word-swaps
Reordering of word components within domain names to create confusion while maintaining recognizable elements.
.br
Examples: mybank.com → bankmy.com, secure-login.com → loginsecure.com

.TP
.B hyphenation
Addition and removal of hyphens in domain names, and substitution of other characters with hyphens.
.br
Examples: google.com → goo-gle.com, my-bank.com → mybank.com, secure_login.com → secure-login.com

.TP
.B subdomain-injection
Injection of subdomain components and manipulation of domain hierarchy.
.br
Examples: google.com → www.google.com, mail.google.com, secure.google.com

.TP
.B dot-insertion
Strategic insertion of dots within domain names to create subdomain confusion.
.br
Examples: google.com → g.oogle.com, goo.gle.com, go.ogle.com

.TP
.B dot-omission
Removal of dots from existing subdomains or compound domains.
.br
Examples: sub.domain.com → subdomain.com, my.site.com → mysite.com

.TP
.B dot-hyphen-substitution
Replacement of dots with hyphens and vice versa in domain structures.
.br
Examples: sub.domain.com → sub-domain.com, my-site.com → my.site.com

.SS Domain Extensions
TLD and domain extension manipulations:

.TP
.B tld-variations
Alternative top-level domain variations using common TLD substitutions.
.br
Examples: google.com → google.net, google.org, google.co, google.io

.TP
.B intl-tld
International and country-code TLD variations.
.br
Examples: google.com → google.co.uk, google.de, google.fr, google.ca

.TP
.B wrong-sld
Wrong second-level domain substitutions in ccTLD contexts.
.br
Examples: site.co.uk → site.com.uk, domain.org.uk → domain.co.uk

.TP
.B combosquatting
Addition of dictionary words as prefixes or suffixes to create compound domains.
.br
Examples: google.com → securegoogle.com, googlesecure.com, mygoogle.com

.TP
.B brand-confusion
Addition of brand-related terms to create confusion with legitimate brands.
.br
Examples: google.com → googlebrand.com, officialgoogle.com, google-secure.com

.TP
.B domain-prefix
Addition of common prefixes to domain names.
.br
Examples: google.com → mygoogle.com, thegoogle.com, secure-google.com

.TP
.B domain-suffix
Addition of common suffixes to domain names.
.br
Examples: google.com → google-secure.com, google-official.com, google-site.com

.SS Transformation Bundles
Logical groupings of related transformations:

.TP
.B lookalike
Character-level transformations that create visually similar domains. This is the default transformation bundle, specifically designed to generate domains that can fool users through visual deception. The lookalike bundle combines four core transformation types that attackers commonly use in phishing campaigns and typosquatting attacks.
.br
.br
The lookalike bundle includes the following transformations:
.br
.br
\fB1. 1337speak (Leet Speak)\fR - Replaces letters with visually similar numbers and symbols:
.br
  • \fBo → 0\fR (zero): google.com → g00gle.com, amazon.com → amaz0n.com
.br
  • \fBl → 1\fR (one): paypal.com → paypa1.com, apple.com → app1e.com  
.br
  • \fBe → 3\fR (three): facebook.com → fac3book.com, secure.com → s3cur3.com
.br
  • \fBa → @\fR (at symbol): bank.com → b@nk.com, amazon.com → @m@zon.com
.br
  • \fBs → $\fR (dollar): store.com → $tore.com, site.com → $ite.com
.br
  • \fBi → !\fR (exclamation): microsoft.com → m!crosoft.com
.br
  • \fBt → 7\fR (seven): twitter.com → 7witter.com, target.com → 7arget.com
.br
  • \fBg → 9\fR (nine): google.com → 9oogle.com, github.com → 9ithub.com
.br
  Multiple substitutions per domain: google.com → g00gl3.com, 900gl3.com
.br
.br
\fB2. misspelling\fR - Simulates common typing errors and mistakes:
.br
  • \fBCharacter deletion\fR: Remove one letter → google.com → gogle.com, amazon.com → amazn.com
.br
  • \fBCharacter insertion\fR: Add extra letter → google.com → googlle.com, bank.com → baank.com
.br
  • \fBCharacter transposition\fR: Swap adjacent letters → google.com → googel.com, paypal.com → payapl.com
.br
  • \fBCharacter substitution\fR: Replace with similar letter → google.com → googke.com, microsoft.com → microsoct.com
.br
  • \fBVowel swapping\fR: Replace vowels → amazon.com → emezen.com, apple.com → epple.com
.br
  • \fBKeyboard adjacent errors\fR: Hit nearby key → google.com → hoogle.com (g→h), facebook.com → dacebook.com (f→d)
.br
.br
\fB3. fat-finger\fR - Models accidental key repetition and adjacent key presses:
.br
  • \fBCharacter doubling\fR: Accidentally repeat keystroke → google.com → gooogle.com, apple.com → appple.com
.br
  • \fBAdjacent key insertion\fR: Hit extra key next to target → google.com → gpooogle.com (p next to o)
.br
  • \fBFat finger combinations\fR: Multiple adjacent errors → microsoft.com → microsooft.com
.br
  • \fBCommon patterns\fR: amazon.com → amazoon.com, facebook.com → facebookk.com
.br
.br
\fB4. mixed-encodings (Homograph Attack)\fR - Uses visually identical Unicode characters:
.br
  • \fBCyrillic lookalikes\fR: Latin 'a' vs Cyrillic 'а' (different Unicode) → paypal.com → pаypal.com
.br
  • \fBGreek substitutions\fR: Latin 'o' vs Greek 'ο' → google.com → gοοgle.com
.br
  • \fBAdvanced homoglyphs\fR: apple.com → аpple.com (Cyrillic а), microsοft.com (Greek ο)
.br
  • \fBPunycode encoding\fR: These render as xn--paypl-g0a.com in ASCII-compatible encoding
.br
  • \fBMultiple script mixing\fR: google.com → gοоgle.com (mixing Greek ο and Cyrillic о)
.br
.br
\fBWhy lookalike is the default:\fR This bundle represents the most dangerous and commonly used techniques in real-world attacks. These transformations are specifically chosen because they:
.br
• Create domains that look nearly identical to the original
.br
• Are difficult for users to spot, especially on mobile devices
.br
• Require no technical sophistication from attackers
.br
• Have high success rates in phishing campaigns
.br
• Cover both automated (typos, fat-finger) and intentional (1337speak, homographs) attack vectors

.TP
.B system-fault
Hardware and system error transformations. Includes: bitsquatting.
.br
Examples: google.com → gmogle.com (bit-flip error)

.TP
.B vowel\-swap
Vowel substitution and swapping (a→e, o→u) to create phonetically similar variations.
.br
Examples: google.com → guugle.com, geggle.com, gaagle.com

.TP
.B cognitive
Semantic word confusion using words that are conceptually similar or commonly confused in meaning.
.br
Examples: secure.com → safety.com, login.com → signin.com, shop.com → store.com

.TP
.B singular\-plural
Transformation between singular and plural forms of words within domain names.
.br
Examples: book.com → books.com, files.com → file.com, service.com → services.com

.SS Number/Word Substitution
Numeric and word form variations:

.TP
.B cardinal\-substitution
Substitution of cardinal numbers with their word equivalents and vice versa (1→one, two→2).
.br
Examples: one.com → 1.com, 2checkout.com → twocheckout.com, four20.com → 420.com

.TP
.B ordinal\-substitution
Substitution of ordinal numbers with their written forms (1st→first, 2nd→second).
.br
Examples: 1st.com → first.com, 2ndchance.com → secondchance.com

.SS Structure Manipulation
Domain structure and format changes:

.TP
.B word\-swap
Reordering of word components within domain names to create confusion while maintaining recognizable elements.
.br
Examples: mybank.com → bankmy.com, secure-login.com → loginsecure.com

.TP
.B hyphenation
Addition and removal of hyphens in domain names, and substitution of other characters with hyphens.
.br
Examples: google.com → goo-gle.com, my-bank.com → mybank.com, secure_login.com → secure-login.com

.TP
.B subdomain
Injection of subdomain components and manipulation of domain hierarchy.
.br
Examples: google.com → www.google.com, mail.google.com, secure.google.com

.TP
.B dot\-insertion
Strategic insertion of dots within domain names to create subdomain confusion.
.br
Examples: google.com → g.oogle.com, goo.gle.com, go.ogle.com

.TP
.B dot\-omission
Removal of dots from multi-part domains to create confusion about domain structure.
.br
Examples: sub.domain.com → subdomaincom, my.site.co.uk → mysitecouk

.TP
.B dot\-hyphen\-sub
Substitution between dots and hyphens in domain names.
.br
Examples: sub.domain.com → sub-domain-com, my-site.com → my.site.com

.SS Domain Extensions
TLD and branding transformations:

.TP
.B tld\-variations
Top-Level Domain variations using common TLDs (.com, .net, .org, country codes) and new gTLDs.
.br
Examples: google.com → google.net, google.org, google.co, google.app

.TP
.B intl\-tld
Internationalized Top-Level Domain variations using non-Latin script TLDs.
.br
Examples: google.com → google.网络 (Chinese), google.рф (Russian)

.TP
.B wrong\-sld
Wrong Second-Level Domain variations, particularly targeting country-code domains (.co.uk, .com.au).
.br
Examples: example.co.uk → example.com.uk, example.org.uk, site.com.au → site.net.au

.TP
.B combosquatting
Combination with common business and technology keywords (login, secure, mail, app, etc.).
.br
Examples: google.com → google-login.com, secure-google.com, google-app.com, googlemail.com

.TP
.B brand\-confusion
Addition of authority-suggesting prefixes and suffixes (secure-, -official, -verified).
.br
Examples: google.com → secure-google.com, google-official.com, verified-google.com

.TP
.B domain\-prefix
Addition of common prefixes to create official-looking variations.
.br
Examples: google.com → mygoogle.com, www-google.com, new-google.com

.TP
.B domain\-suffix
Addition of common suffixes to create branded variations.
.br
Examples: google.com → google-inc.com, google-corp.com, googlesite.com

.SH MODES OF OPERATION

.SS Combo Mode (Default)
In combo mode, multiple transformations are applied sequentially to create complex variations. Each generated domain goes through 2-5 random transformations from the enabled set, creating sophisticated combinations that simulate real-world attack scenarios.

.SS One-Transformation Mode (-1)
In one-transformation mode, each enabled transformation is applied individually to the original domain. This mode is useful for understanding the specific impact of each transformation type and for systematic analysis.

.SH OUTPUT FORMAT
The output format varies depending on options:

.TP
.B Basic Output
Each line contains a domain variation.

.TP
.B With Similarity Scoring
Format: \fISIMILARITY_SCORE\fR, \fIDOMAIN\fR

.TP
.B With Status Checking
Format: \fISIMILARITY_SCORE\fR, \fIDOMAIN\fR, \fISTATUS\fR
.br
Where STATUS is one of: available, registered, parked, error

.SH SIMILARITY SCORING
When similarity scoring is enabled, domfuzz calculates three types of similarity:

.TP
.B Visual Similarity
Measures how visually similar the variation appears to the original domain using character shape and appearance analysis.

.TP
.B Cognitive Similarity
Measures how mentally similar the variation is using phonetic analysis and semantic meaning.

.TP
.B Combined Score
A weighted combination of visual and cognitive similarity scores, providing an overall assessment of how deceptive the variation might be.

.SH EXAMPLES
.TP
Generate all possible variations for example.com:
.B domfuzz example.com

.TP
Generate only character substitution and keyboard variations:
.B domfuzz \-t char\-sub,keyboard example.com

.TP
Check registration status of variations, showing only registered domains:
.B domfuzz \-r example.com

.TP
Generate 50 variations with similarity scoring:
.B domfuzz \-n 50 \-\-similarity example.com

.TP
Run individual transformations with verbose output:
.B domfuzz \-1 \-v \-t misspellings,homoglyphs example.com

.TP
Find highly similar variations (threshold 0.8 or higher):
.B domfuzz \-\-min\-similarity 0.8 \-\-similarity example.com

.TP
Use custom dictionary for combosquatting:
.B domfuzz \-t combosquatting \-\-dictionary /path/to/keywords.txt example.com

.SH SECURITY CONSIDERATIONS
.B domfuzz
is designed for defensive security purposes including:
.IP \(bu 4
Brand protection and monitoring
.IP \(bu 4
Phishing awareness and training
.IP \(bu 4
Domain registration defense
.IP \(bu 4
Security research and analysis

The tool should be used responsibly and in accordance with applicable laws and regulations. Users should not use generated domains for malicious purposes such as phishing, fraud, or trademark infringement.

.SH FILES
.TP
.I ~/.local/share/domfuzz/dictionary.txt
Default dictionary file for combosquatting (if exists)

.SH EXIT STATUS
.B domfuzz
exits with status 0 on success, and >0 if an error occurs.

.SH BUGS
Report bugs at: https://github.com/example/domfuzz/issues

.SH AUTHOR
Written by Albert Hui <albert@securityronin.com> for defensive security research and brand protection purposes.

.SH COPYRIGHT
Copyright (c) 2025 Albert Hui <albert@securityronin.com>
.br
This software is released under the MIT License.
.br
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
.br
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
.br
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.br
For the complete license text, see the LICENSE file distributed with this software.

.SH SEE ALSO
.BR whois (1),
.BR dig (1),
.BR nslookup (1)