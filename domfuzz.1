.TH DOMFUZZ 1 "2024" "domfuzz 0.1.1" "Domain Fuzzing Tool"
.SH NAME
domfuzz \- generate domain name variations using typosquatting techniques
.SH SYNOPSIS
.B domfuzz
[\fIOPTIONS\fR] \fIDOMAIN\fR
.SH DESCRIPTION
.B domfuzz
is a comprehensive domain name variation generator that uses advanced typosquatting techniques to create potential malicious domain variations. It implements 22 different transformation algorithms organized into logical categories to simulate how attackers might create lookalike domains for phishing, brand impersonation, and other malicious activities.

The tool operates in two modes: one-transformation mode (default) where each algorithm is applied individually, and combo mode where transformations are chained together to create complex variations. Results can include similarity scoring, domain availability checking, and filtering by registration status.

.SH OPTIONS
.TP
.B \-t, \-\-transformation \fITRANSFORMATION\fR
Specify transformations to enable (comma-separated). Use 'all' for all transformations. If not specified, the lookalike bundle is enabled by default.
.TP
.B \-n, \-\-max\-variations \fINUMBER\fR
Limit the maximum number of variations to output.
.TP
.B \-s, \-\-check\-status
Check domain availability status (requires network connectivity).
.TP
.B \-r, \-\-only\-registered
Output only domains that are registered (not available). Implies \-\-check\-status.
.TP
.B \-\-dictionary \fIFILE\fR
Path to dictionary file for combosquatting transformations.
.TP
.B \-1, \-\-one\-transformation
Run transformations in combo mode where multiple transformations are chained together on the same domain to create more complex variations. By default, domfuzz runs in one-transformation mode where each transformation is applied individually.
.TP
.B \-v, \-\-verbose
Enable verbose output showing transformation details and generation process.
.TP
.B \-\-similarity
Calculate and display similarity scores for generated variations.
.TP
.B \-\-min\-similarity \fITHRESHOLD\fR
Filter results to minimum similarity threshold (0.0-1.0).
.TP
.B \-h, \-\-help
Print help information.

.SH TRANSFORMATION ALGORITHMS
.B domfuzz
implements 22 different transformation algorithms organized into logical categories:

.SS Character-Level Transformations
Advanced character-level modifications that create visually similar domains. These transformations can be used individually with \fB-t transformation_name\fR or as part of the lookalike bundle (default):

.TP
.B 1337speak
Leetspeak (also known as "leet" or "1337") is a form of internet slang that replaces letters with visually similar numbers and symbols. This transformation simulates how attackers create typosquatting domains using character substitutions that are immediately recognizable to users but visually deceptive. The algorithm applies common internet culture replacements either individually or in realistic combinations.
.br
.br
\fBCharacter mappings:\fR
.br
• \fBo → 0\fR: The most common substitution, as zero and letter 'o' are nearly identical
.br
• \fBl → 1\fR: Lowercase 'l' and number '1' often appear identical in many fonts
.br
• \fBe → 3\fR: The number '3' resembles a backwards 'E'
.br
• \fBa → @\fR: The at-symbol contains the letter 'a' shape
.br
• \fBs → $\fR: The dollar sign resembles an 'S' with lines through it
.br
• \fBi → !\fR: Exclamation point resembles lowercase 'i' without the dot
.br
• \fBt → 7\fR: The number '7' can resemble a 't' in certain fonts
.br
• \fBg → 9\fR: The number '9' bears some resemblance to 'g'
.br
.br
\fBIntelligent application:\fR
.br
• Respects domain length (longer domains allow more substitutions)
.br
• Maximum 40% character substitution to maintain readability
.br
• Realistic spacing prevents consecutive substitutions in short domains
.br
• Prioritizes high-impact substitutions (o→0, l→1) for maximum visual similarity
.br
.br
\fBReal-world examples:\fR
.br
google.com → g00gle.com, g0ogle.com, goog1e.com, 9oogle.com
.br
amazon.com → amaz0n.com, @mazon.com, @m@z0n.com
.br
paypal.com → paypa1.com, p@ypal.com, p@yp@l.com
.br
microsoft.com → m!crosoft.com, micr0soft.com, micr0$0ft.com

.TP
.B misspelling
Comprehensive typing error simulation that models the most common mistakes users make when entering domain names. This transformation consolidates multiple error types into a single, realistic algorithm that respects natural typing patterns and constraints. It simulates both accidental errors (typos, slips) and cognitive errors (transpositions, substitutions).
.br
.br
\fBError types implemented:\fR
.br
• \fBCharacter deletion\fR: Accidentally skip a letter while typing
.br
• \fBCharacter insertion\fR: Accidentally hit an extra key or double-type
.br
• \fBCharacter transposition\fR: Swap two adjacent characters (very common error)
.br
• \fBCharacter substitution\fR: Hit a wrong key, often adjacent to correct key
.br
• \fBVowel swapping\fR: Confuse similar vowel sounds (a/e, o/u, i/e)
.br
• \fBKeyboard adjacent errors\fR: Hit keys physically next to the intended key
.br
.br
\fBIntelligent error modeling:\fR
.br
• Frequency-based error placement (more errors in middle of words)
.br
• Length-aware constraints (shorter domains get fewer errors)
.br
• Realistic error combinations (1-3 errors per domain maximum)
.br
• Position weighting (avoids errors at start/end of short domains)
.br
• QWERTY keyboard layout modeling for adjacent key errors
.br
.br
\fBReal-world examples:\fR
.br
google.com → googlle.com (double-l insertion), gogle.com (o deletion)
.br
amazon.com → amazno.com (transposition), amozon.com (a→o vowel swap)
.br
paypal.com → paypla.com (transposition), oaypal.com (adjacent key p→o)
.br
facebook.com → facbook.com (e deletion), faceboook.com (o insertion)
.br
microsoft.com → microsfot.com (transposition), microsift.com (o→i substitution)

.TP
.B fat-finger
Models accidental keypresses that occur when users type too quickly or press keys imprecisely. This transformation simulates the "fat finger" effect where users accidentally hit multiple keys or keys adjacent to their target. The algorithm focuses specifically on key repetition and insertion errors that result from imprecise finger placement or timing.
.br
.br
\fBError mechanisms:\fR
.br
• \fBCharacter doubling\fR: Hold key too long or press twice accidentally
.br
• \fBAdjacent key insertion\fR: Press extra key next to intended target
.br
• \fBMultiple adjacent errors\fR: Several finger placement errors in same domain
.br
• \fBTyping speed errors\fR: Errors that occur during fast typing
.br
.br
\fBQWERTY adjacency modeling:\fR
.br
• Horizontal adjacency: q↔w↔e↔r↔t↔y, a↔s↔d↔f↔g↔h, z↔x↔c↔v↔b↔n
.br
• Vertical adjacency: q↔a↔z, w↔s↔x, e↔d↔c, r↔f↔v, t↔g↔b, etc.
.br
• Diagonal adjacency: q↔s, w↔a↔d, e↔s↔f, etc.
.br
• Common mistakes: o↔p, l↔;, n↔m, etc.
.br
.br
\fBRealistic constraints:\fR
.br
• Prevents excessive repetition (max 2-3 repeated characters)
.br
• Limits adjacent errors to maintain readability
.br
• Frequency-based placement (more errors in frequently-hit keys)
.br
• Length-appropriate error density
.br
.br
\fBReal-world examples:\fR
.br
google.com → gooogle.com (o repetition), googgle.com (g repetition)
.br
amazon.com → amazoon.com (o doubling), amaozn.com (adjacent z→o)
.br
paypal.com → paypall.com (l doubling), paypakl.com (adjacent l→k)
.br
facebook.com → facebookk.com (k doubling), favebook.com (adjacent c→v)
.br
microsoft.com → microosoft.com (o doubling), microsofft.com (f doubling)

.TP
.B mixed-encodings
Advanced Unicode-based homograph attack that exploits visually identical characters from different writing systems to create deceptive domains. This is one of the most sophisticated and dangerous transformation types, as the resulting domains are virtually indistinguishable from legitimate ones in most fonts and browsers. The technique leverages the vast Unicode character set to find lookalike characters from various scripts.
.br
.br
\fBHomograph attack vectors:\fR
.br
• \fBCyrillic substitutions\fR: Latin letters replaced with identical Cyrillic letters
.br
• \fBGreek substitutions\fR: Latin letters replaced with identical Greek letters
.br
• \fBMultiple script mixing\fR: Combining different writing systems in one domain
.br
• \fBExtended Unicode\fR: Less common but visually identical characters
.br
• \fBPunycode encoding\fR: ASCII-compatible encoding revealing the attack
.br
.br
\fBCommon character substitutions:\fR
.br
• \fBLatin 'a' (U+0061) → Cyrillic 'а' (U+0430)\fR: Identical appearance
.br
• \fBLatin 'o' (U+006F) → Cyrillic 'о' (U+043E)\fR: Perfect visual match
.br
• \fBLatin 'e' (U+0065) → Cyrillic 'е' (U+0435)\fR: Indistinguishable
.br
• \fBLatin 'p' (U+0070) → Cyrillic 'р' (U+0440)\fR: Identical shape
.br
• \fBLatin 'o' (U+006F) → Greek 'ο' (U+03BF)\fR: Same visual representation
.br
• \fBLatin 'c' (U+0063) → Cyrillic 'с' (U+0441)\fR: Perfect lookalike
.br
.br
\fBTechnical implementation:\fR
.br
• Browser display: Domains appear identical to users
.br
• Punycode encoding: xn--prefix reveals non-ASCII characters
.br
• DNS resolution: Works normally, pointing to attacker infrastructure
.br
• Certificate validation: Browsers may show warnings for mixed scripts
.br
• Detection difficulty: Extremely hard for users to detect visually
.br
.br
\fBReal-world examples:\fR
.br
google.com → gооgle.com (Cyrillic о characters, Punycode: xn--ggle-55da0q)
.br
paypal.com → pаypal.com (Cyrillic а, Punycode: xn--pypal-4ve)
.br
amazon.com → аmazon.com (Cyrillic а, Punycode: xn--mazon-3ve)
.br
apple.com → аpple.com (Cyrillic а, Punycode: xn--pple-43d)
.br
microsoft.com → microsοft.com (Greek ο, Punycode: xn--microsooft-99b)

.TP
.B bitsquatting
Advanced transformation that simulates single bit-flip errors in ASCII characters, modeling hardware failures, memory corruption, cosmic ray strikes, or transmission errors. This technique creates subtle domain variations that could occur naturally due to system faults, making them particularly insidious as they appear to be accidental rather than intentional attacks.
.br
.br
\fBBit-flip mechanism:\fR
.br
• Each ASCII character is represented as 8 bits (binary)
.br
• A single bit is flipped from 0 to 1 or 1 to 0
.br
• Results in a different but often visually similar character
.br
• Simulates real-world hardware error scenarios
.br
.br
\fBCommon bit-flip examples:\fR
.br
• \fB'o' (0x6F) → 'g' (0x67)\fR: Bit 3 flipped → google.com → ggogle.com
.br
• \fB'e' (0x65) → 'a' (0x61)\fR: Bit 2 flipped → secure.com → sacure.com
.br
• \fB'l' (0x6C) → 'h' (0x68)\fR: Bit 2 flipped → paypal.com → paypah.com
.br
• \fB'n' (0x6E) → 'f' (0x66)\fR: Bit 3 flipped → amazon.com → amazof.com
.br
• \fB'r' (0x72) → 's' (0x73)\fR: Bit 0 flipped → microsoft.com → microsoct.com
.br
.br
\fBAttack scenarios:\fR
.br
• Memory corruption during DNS resolution
.br
• Cosmic ray strikes on network equipment (rare but documented)
.br
• Hardware failures in routers or DNS servers
.br
• Electromagnetic interference affecting data transmission
.br
• Malicious manipulation disguised as system errors
.br
.br
\fBReal-world examples:\fR
.br
google.com → gmogle.com, foogle.com, woogle.com (various g bit-flips)
.br
amazon.com → amazoo.com, amajon.com, emaron.com (various bit-flips)
.br
paypal.com → qaypal.com, peypal.com, payqal.com (various bit-flips)

.SS Phonetic/Semantic Transformations
Sound and meaning-based variations:

.TP
.B homophones
Advanced phonetic transformation that replaces words with sound-alike alternatives that have different spellings but similar or identical pronunciations. This technique exploits the natural tendency of users to type words phonetically, especially when uncertain of spelling, and can be particularly effective against users whose native language differs from the domain language.
.br
.br
BPhonetic substitution categories:R
.br
• BHomophone pairsR: Direct sound-alike replacements (to/two, see/sea, right/write)
.br
• BPhonetic spellingR: Alternative spellings based on pronunciation (phone → fone, enough → enuf)
.br
• BSilent lettersR: Omission of silent letters (know → no, write → rite)
.br
• BVowel soundsR: Similar vowel sound substitutions (a → e in certain contexts)
.br
• BConsonant clustersR: Simplified consonant groups (night → nite, light → lite)
.br
.br
BCommon homophone examples:R
.br
• Bto/two/tooR: Numbers and prepositions → 2checkout.com, toocheckout.com
.br
• Bsee/sea/cR: Viewing and ocean → seesecurity.com, csecurity.com
.br
• Bright/write/riteR: Direction and authoring → writebank.com, ritebank.com
.br
• Bwon/one/1R: Victory and numbers → wonbank.com, 1bank.com
.br
• Bno/knowR: Negation and knowledge → nomorepay.com, knowmorpay.com
.br
• Bfor/four/4R: Preposition and number → 4google.com, fourgle.com
.br
.br
BAttack effectiveness:R
.br
• Exploits natural phonetic typing tendencies
.br
• Particularly effective against non-native speakers
.br
• Works well with voice-to-text input systems
.br
• Creates plausible alternative spellings
.br
• Often bypasses spell-checkers in browsers
.br
.br
BReal-world examples:R
.br
paypal.com → paypall.com, paypal.com → paepal.com (phonetic 'ay' → 'ae')
.br
google.com → googel.com, guggle.com (phonetic variations)
.br
security.com → sekurity.com, securety.com (phonetic 'c' → 'k', 'i' → 'e')
.br
amazon.com → amazonn.com (phonetic double consonant)

.TP
.B cognitive
Advanced semantic transformation that exploits cognitive biases and word association patterns by substituting words with conceptually related or commonly confused terms. This technique leverages users' mental models and expectations, creating domains that feel "close enough" to be legitimate while being distinctly different. Particularly effective in business and technical contexts where industry jargon creates semantic overlap.
.br
.br
BSemantic substitution categories:R
.br
• BSynonym replacementR: Words with similar meaning (secure → safe, buy → purchase)
.br
• BIndustry terminologyR: Related business terms (login → signin, account → profile)
.br
• BAction verbsR: Similar actions (download → install, search → find)
.br
• BConcept confusionR: Related concepts (mail → email, web → net)
.br
• BBrand terminologyR: Alternative brand language (shop → store, pay → checkout)
.br
.br
BCommon cognitive substitutions:R
.br
• Bsecure ↔ safeR: Security concept overlap → securebank.com → safebank.com
.br
• Blogin ↔ signinR: Authentication terminology → userlogin.com → usersignin.com
.br
• Bshop ↔ storeR: Commerce terminology → onlineshop.com → onlinestore.com
.br
• Bmail ↔ emailR: Communication concepts → webmail.com → webemail.com
.br
• Baccount ↔ profileR: User identity → myaccount.com → myprofile.com
.br
• Bsearch ↔ findR: Discovery actions → quicksearch.com → quickfind.com
.br
• Bdownload ↔ installR: Software actions → appdownload.com → appinstall.com
.br
.br
BPsychological exploitation:R
.br
• Exploits semantic memory networks in the brain
.br
• Leverages industry-specific terminology familiarity
.br
• Creates "close enough" feeling for legitimacy
.br
• Works on users' expectation patterns
.br
• Particularly effective in professional contexts
.br
.br
BBusiness context attacks:R
.br
• Financial: banking → finance, money → funds, pay → transfer
.br
• Technology: software → apps, system → platform, data → info
.br
• E-commerce: cart → basket, checkout → payment, order → purchase
.br
• Social media: profile → account, friend → contact, share → post
.br
.br
BReal-world examples:R
.br
paypal.com → payfriend.com, transferpal.com (payment concept overlap)
.br
amazon.com → amazone-store.com, amazonshop.com (shopping terminology)
.br
microsoft.com → microsoftware.com (technology terminology)
.br
linkedin.com → linkednetwork.com, worklinked.com (professional networking)

.TP
.B singular-plural
Grammatical transformation that converts between singular and plural forms of nouns within domain names, exploiting users' uncertainty about correct domain naming conventions. This technique is particularly effective because many legitimate websites use both singular and plural forms inconsistently, creating genuine confusion about which form a legitimate site might use.
.br
.br
BGrammatical transformation patterns:R
.br
• BRegular pluralsR: Adding or removing -s suffix (file → files, book → books)
.br
• BIrregular pluralsR: Complex plural forms (child → children, person → people)
.br
• BUnchanged pluralsR: Same form for both (sheep, fish, software)
.br
• BLatin pluralsR: Academic/technical terms (datum → data, forum → forums/fora)
.br
• BCompound wordsR: Multi-word combinations (webpage → webpages, software → softwares)
.br
.br
BCommon transformation examples:R
.br
• Bfile ↔ filesR: Document management → myfile.com ↔ myfiles.com
.br
• Bservice ↔ servicesR: Business offerings → webservice.com ↔ webservices.com
.br
• Bproduct ↔ productsR: E-commerce → bestproduct.com ↔ bestproducts.com
.br
• Bsolution ↔ solutionsR: Business terminology → itsolution.com ↔ itsolutions.com
.br
• Btool ↔ toolsR: Software/utilities → webtool.com ↔ webtools.com
.br
• BnewsR: Always plural → technews.com (no singular form exists)
.br
.br
BAttack psychology:R
.br
• Exploits grammatical uncertainty in domain naming
.br
• Many legitimate sites exist in both forms
.br
• Users often cannot remember exact grammatical form
.br
• Creates plausible alternative that feels correct
.br
• Particularly effective with technical terminology
.br
.br
BBusiness sector variations:R
.br
• Technology: app → apps, system → systems, platform → platforms
.br
• Finance: account → accounts, investment → investments
.br
• E-commerce: product → products, item → items, deal → deals
.br
• Education: course → courses, lesson → lessons, tutorial → tutorials
.br
• Media: video → videos, photo → photos, article → articles
.br
.br
BReal-world examples:R
.br
amazon.com → amazone-products.com (adding plural concept)
.br
microsoft.com → microsoftservices.com (service → services)
.br
google.com → googletool.com vs googletools.com (tool ambiguity)
.br
paypal.com → paypalaccounts.com (account → accounts)

.SS Number/Word Substitution
Numeric and word form variations:

.TP
.B cardinal-substitution
Numerical transformation that converts between cardinal numbers and their written word equivalents in both directions, exploiting variations in how numbers are represented in domain names. This technique is particularly effective because legitimate websites often use inconsistent number representation, and users frequently are uncertain whether a site uses digits or written numbers.
.br
.br
BCardinal number conversion patterns:R
.br
• BDigits to wordsR: 1 → one, 2 → two, 3 → three, etc.
.br
• BWords to digitsR: one → 1, two → 2, three → 3, etc.
.br
• BMixed representationsR: Partial conversions within compound terms
.br
• BZero variationsR: 0 → zero, oh, null, nil
.br
• BTeen numbersR: 11 → eleven, 12 → twelve, 13 → thirteen, etc.
.br
• BLarge numbersR: 100 → hundred, 1000 → thousand
.br
.br
BCommon transformation examples:R
.br
• B1 ↔ oneR: First or unity → 1stbank.com ↔ firstbank.com
.br
• B2 ↔ twoR: Second or pair → 2checkout.com ↔ twocheckout.com  
.br
• B4 ↔ fourR: Quantity or 'for' homophone → 4you.com ↔ fouryou.com
.br
• B8 ↔ eightR: Infinity symbol resemblance → figure8.com ↔ figureeight.com
.br
• B10 ↔ tenR: Decimal base → top10.com ↔ topten.com
.br
• B0 ↔ zeroR: Null representation → point0.com ↔ pointzero.com
.br
.br
BSpecial number contexts:R
.br
• BVersioningR: v1.com → vone.com, version2.com → versiontwo.com
.br
• BRankingR: number1.com → numberone.com, top5.com → topfive.com
.br
• BQuantityR: buy2.com → buytwo.com, get3.com → getthree.com
.br
• BDates/YearsR: 2024.com → twentytwentyfour.com
.br
• BTechnologyR: web2.com → webtwo.com, ai4.com → aifour.com
.br
.br
BAttack effectiveness:R
.br
• Exploits inconsistent numbering conventions online
.br
• Creates plausible alternatives users might expect
.br
• Works with voice recognition systems (digits vs words)
.br
• Particularly effective with business/brand names
.br
• Leverages homophone confusion (2/to/too, 4/for, 8/ate)
.br
.br
BReal-world examples:R
.br
1password.com → onepassword.com (digit to word)
.br
twilio.com → 2lio.com (word to digit, partial)
.br
4chan.org → fourchan.org (digit to word)
.br
nine.com → 9.com (word to digit)

.TP
.B ordinal-substitution
Specialized numerical transformation that converts between ordinal numbers and their written equivalents, focusing on position, sequence, and ranking terminology. This technique exploits the multiple ways ordinal concepts can be represented in domain names, particularly effective with business names that emphasize priority, sequence, or ranking.
.br
.br
BOrdinal conversion patterns:R
.br
• BNumeric ordinalsR: 1st → first, 2nd → second, 3rd → third
.br
• BSuffix variationsR: -st, -nd, -rd, -th endings
.br
• BWritten ordinalsR: first → 1st, second → 2nd, third → 3rd
.br
• BHybrid formsR: Mixed digit-word combinations
.br
• BRanking terminologyR: Position-based language variations
.br
.br
BCommon ordinal transformations:R
.br
• B1st ↔ firstR: Primary position → 1stchoice.com ↔ firstchoice.com
.br
• B2nd ↔ secondR: Secondary position → 2ndchance.com ↔ secondchance.com
.br
• B3rd ↔ thirdR: Tertiary position → 3rdparty.com ↔ thirdparty.com
.br
• B4th ↔ fourthR: Quaternary position → 4thstreet.com ↔ fourthstreet.com
.br
• B5th ↔ fifthR: Quinary position → 5thavenue.com ↔ fifthavenue.com
.br
• Blast ↔ finalR: Terminal position → lastcall.com ↔ finalcall.com
.br
.br
BBusiness context applications:R
.br
• BPriority servicesR: 1stpriority.com → firstpriority.com
.br
• BSequential offeringsR: 2ndround.com → secondround.com  
.br
• BRanking systemsR: 3rdplace.com → thirdplace.com
.br
• BVersioningR: 2ndversion.com → secondversion.com
.br
• BTime sequencesR: 1stquarter.com → firstquarter.com
.br
.br
BSpecialized ordinal contexts:R
.br
• BStreet addressesR: 5thstreet.com → fifthstreet.com
.br
• BEvent namingR: 10thannual.com → tenthannual.com
.br
• BGeneration termsR: 3rdgen.com → thirdgen.com
.br
• BLevel/tier systemsR: 1stlevel.com → firstlevel.com
.br
• BSequential brandsR: 2ndnature.com → secondnature.com
.br
.br
BAttack psychology:R
.br
• Exploits uncertainty about ordinal representation conventions
.br
• Many businesses use both numeric and written ordinals
.br
• Creates legitimacy through familiar ranking terminology
.br
• Works with voice-to-text systems (spoken ordinals)
.br
• Particularly effective with established sequence-based brands
.br
.br
BReal-world examples:R
.br
21stcentury.com → twentyfirstcentury.com (ordinal expansion)
.br
3rdpartysoftware.com → thirdpartysoftware.com (standard conversion)
.br
1stchoicebank.com → firstchoicebank.com (priority emphasis)
.br
2ndopinion.com → secondopinion.com (sequential service)

.SS Structure Manipulation
Domain structure and format changes:

.TP
.B word-swaps
Structural transformation that reorders word components within compound domain names, maintaining all original elements but changing their sequence to create confusion while preserving recognizable brand elements. This technique exploits users' tendency to focus on familiar words rather than their exact order, particularly effective with multi-word domain names and compound business terms.
.br
.br
BWord reordering patterns:R
.br
• BTwo-word reversalR: word1-word2 → word2-word1
.br
• BMulti-word rotationR: Cyclical reordering of three or more words
.br
• BPriority inversionR: Moving secondary words to primary position
.br
• BAction-object swapsR: Verb-noun reordering (download-music → music-download)
.br
• BAdjective-noun swapsR: Descriptor-subject reordering (secure-banking → banking-secure)
.br
.br
BCommon word swap examples:R
.br
• Bmybank ↔ bankmyR: Possessive-institution → mybank.com ↔ bankmy.com
.br
• Bsecure-login ↔ login-secureR: Security-action → securelogin.com ↔ loginsecure.com
.br
• Bweb-design ↔ design-webR: Platform-service → webdesign.com ↔ designweb.com
.br
• Bquick-pay ↔ pay-quickR: Speed-action → quickpay.com ↔ payquick.com
.br
• Bsmart-home ↔ home-smartR: Technology-location → smarthome.com ↔ homesmart.com
.br
.br
BBusiness context applications:R
.br
• BFinancial servicesR: onlinebanking.com → bankingonline.com
.br
• BE-commerceR: fastdelivery.com → deliveryfast.com
.br
• BTechnologyR: cloudstorage.com → storagecloud.com
.br
• BHealthcareR: medicalcare.com → caremedical.com
.br
• BEducationR: onlinelearning.com → learningonline.com
.br
.br
BMulti-word complex swaps:R
.br
• BThree-word rotationR: secure-online-banking → banking-secure-online → online-banking-secure
.br
• BPartial reorderingR: my-secure-account → secure-my-account → account-secure-my
.br
• BAction-adjective-nounR: buy-cheap-books → cheap-buy-books → books-cheap-buy
.br
.br
BPsychological exploitation:R
.br
• Users focus on familiar words, not exact order
.br
• Maintains brand recognition through word presence
.br
• Creates plausible alternative arrangements
.br
• Works with users' mental autocorrection
.br
• Particularly effective when original order isn't intuitive
.br
.br
BReal-world examples:R
.br
paypalcredit.com → creditpaypal.com (service-brand swap)
.br
microsoftoffice.com → officemicrosoft.com (product-company swap)
.br
googleanalytics.com → analyticsgoogle.com (service-company swap)
.br
amazonprime.com → primeamazon.com (service-platform swap)

.TP
.B hyphenation
Structural transformation that manipulates hyphen usage in domain names through insertion, removal, and character substitution, exploiting variations in hyphenation conventions and users' uncertainty about correct punctuation in domain names. This technique is particularly effective because legitimate websites often exist with and without hyphens, creating genuine confusion about the correct format.
.br
.br
BHyphenation manipulation patterns:R
.br
• BHyphen insertionR: Adding hyphens within words (google → goo-gle)
.br
• BHyphen removalR: Removing existing hyphens (my-bank → mybank)
.br
• BCharacter substitutionR: Replacing other punctuation with hyphens (_ → -, . → -)
.br
• BWord boundary insertionR: Adding hyphens at logical word breaks
.br
• BSyllable separationR: Hyphenating at syllable boundaries
.br
.br
BCommon hyphenation transformations:R
.br
• Bgoogle → goo-gleR: Internal word hyphenation
.br
• Bmy-bank → mybankR: Compound word consolidation
.br
• Bsecure_login → secure-loginR: Underscore to hyphen substitution
.br
• Bfacebook → face-bookR: Compound word separation
.br
• Bpaypal → pay-palR: Brand name segmentation
.br
• Be.mail → e-mailR: Dot to hyphen substitution
.br
.br
BBusiness naming variations:R
.br
• BCompound brandsR: microsoft → micro-soft, amazon → ama-zon
.br
• BDescriptive termsR: onlinestore → online-store, webdesign → web-design
.br
• BService combinationsR: quickpay → quick-pay, fastmail → fast-mail
.br
• BTechnology termsR: software → soft-ware, database → data-base
.br
.br
BCharacter substitution patterns:R
.br
• BUnderscore replacementR: secure_banking.com → secure-banking.com
.br
• BDot replacementR: web.mail.com → web-mail.com
.br
• BSpace simulationR: my bank → my-bank (conceptual space representation)
.br
• BCamelCase conversionR: myBank → my-bank (breaking camelCase)
.br
.br
BAttack psychology:R
.br
• Exploits uncertainty about domain hyphenation rules
.br
• Many legitimate variations exist (email/e-mail, website/web-site)
.br
• Creates visually similar but distinct domains
.br
• Works with users' mental autocorrection
.br
• Particularly effective with compound business names
.br
.br
BSEO and branding implications:R
.br
• Hyphenated domains often rank differently in search engines
.br
• Users frequently omit or add hyphens when typing
.br
• Brand consistency issues create multiple plausible versions
.br
• Email systems may treat hyphenated domains differently
.br
.br
BReal-world examples:R
.br
paypal.com → pay-pal.com (brand segmentation)
.br
facebook.com → face-book.com (compound separation)
.br
linkedin.com → linked-in.com (phrasal separation)
.br
wordpress.com → word-press.com (compound word hyphenation)

.TP
.B subdomain-injection
Injection of subdomain components and manipulation of domain hierarchy.
.br
Examples: google.com → www.google.com, mail.google.com, secure.google.com

.TP
.B dot-insertion
Strategic insertion of dots within domain names to create subdomain confusion.
.br
Examples: google.com → g.oogle.com, goo.gle.com, go.ogle.com

.TP
.B dot-omission
Removal of dots from existing subdomains or compound domains.
.br
Examples: sub.domain.com → subdomain.com, my.site.com → mysite.com

.TP
.B dot-hyphen-substitution
Replacement of dots with hyphens and vice versa in domain structures.
.br
Examples: sub.domain.com → sub-domain.com, my-site.com → my.site.com

.SS Domain Extensions
TLD and domain extension manipulations:

.TP
.B tld-variations
Alternative top-level domain variations using common TLD substitutions.
.br
Examples: google.com → google.net, google.org, google.co, google.io

.TP
.B intl-tld
International and country-code TLD variations.
.br
Examples: google.com → google.co.uk, google.de, google.fr, google.ca

.TP
.B wrong-sld
Wrong second-level domain substitutions in ccTLD contexts.
.br
Examples: site.co.uk → site.com.uk, domain.org.uk → domain.co.uk

.TP
.B combosquatting
Strategic transformation that combines target domain names with common dictionary words as prefixes or suffixes to create compound domains that appear to offer enhanced or related services. This technique exploits users' trust in familiar brand names while adding contextual legitimacy through meaningful word combinations, making it one of the most effective social engineering approaches in domain squatting.
.br
.br
BCombosquatting word categories:R
.br
• BSecurity termsR: secure-, safe-, protected-, verified-, trusted-
.br
• BService descriptorsR: -service, -support, -help, -center, -portal
.br
• BPersonalizationR: my-, your-, personal-, private-
.br
• BAuthority markersR: official-, real-, authentic-, legitimate-
.br
• BAction wordsR: login-, download-, access-, connect-, join-
.br
• BTechnology termsR: -app, -online, -web, -digital, -cloud
.br
.br
BCommon combosquatting patterns:R
.br
• Bgoogle → securegoogle, googlesecure, mygoogleR: Security and personalization
.br
• Bpaypal → paypallogin, officialpaypal, safePayPalR: Authentication and authority
.br
• Bamazon → amazonstore, shopamazon, amazonappR: Service extension
.br
• Bmicrosoft → microsoftofficial, realmicrosoft, microsoftsupportR: Authority and service
.br
• Bfacebook → facebooklogin, myfacebook, facebookconnectR: Access and personalization
.br
.br
BPrefix combinations (brand enhancement):R
.br
• BSecurity prefixesR: secure-paypal.com, safe-amazon.com, protected-google.com
.br
• BPersonal prefixesR: my-facebook.com, your-microsoft.com, personal-linkedin.com
.br
• BAuthority prefixesR: official-spotify.com, real-netflix.com, verified-twitter.com
.br
• BService prefixesR: support-apple.com, help-adobe.com, service-oracle.com
.br
.br
BSuffix combinations (service extension):R
.br
• BAction suffixesR: google-login.com, paypal-access.com, amazon-checkout.com
.br
• BService suffixesR: microsoft-support.com, apple-service.com, adobe-help.com
.br
• BTech suffixesR: facebook-app.com, twitter-online.com, linkedin-portal.com
.br
• BLocation suffixesR: paypal-usa.com, amazon-europe.com, google-asia.com
.br
.br
BPsychological manipulation tactics:R
.br
• Creates perception of enhanced security or service
.br
• Leverages trust in established brand names
.br
• Suggests official or authorized relationship
.br
• Appeals to users seeking specific functionality
.br
• Exploits expectation of branded sub-services
.br
.br
BIndustry-specific combinations:R
.br
• BFinancialR: bankofamerica-secure.com, chase-login.com, wellsfargo-online.com
.br
• BTechnologyR: microsoft-support.com, apple-store.com, oracle-cloud.com
.br
• BSocial mediaR: facebook-messenger.com, twitter-api.com, instagram-business.com
.br
• BE-commerceR: amazon-prime.com, ebay-secure.com, shopify-store.com
.br
.br
BReal-world attack examples:R
.br
paypal-verification.com (combines brand + process)
.br
secure-amazon-login.com (security + brand + action)
.br
microsoft-support-center.com (brand + service + location)
.br
google-account-recovery.com (brand + object + action)

.TP
.B brand-confusion
Addition of brand-related terms to create confusion with legitimate brands.
.br
Examples: google.com → googlebrand.com, officialgoogle.com, google-secure.com

.TP
.B domain-prefix
Addition of common prefixes to domain names.
.br
Examples: google.com → mygoogle.com, thegoogle.com, secure-google.com

.TP
.B domain-suffix
Addition of common suffixes to domain names.
.br
Examples: google.com → google-secure.com, google-official.com, google-site.com

.SS Transformation Bundles
Logical groupings of related transformations:

.TP
.B lookalike
Character-level transformations that create visually similar domains. This is the default transformation bundle, specifically designed to generate domains that can fool users through visual deception. The lookalike bundle combines four core transformation types that attackers commonly use in phishing campaigns and typosquatting attacks.
.br
.br
The lookalike bundle includes:
.br
• \fB1337speak\fR - Leetspeak character substitutions (see 1337speak section)
.br
• \fBmisspelling\fR - Comprehensive typing error simulation (see misspelling section)  
.br
• \fBfat-finger\fR - Accidental keypress and repetition errors (see fat-finger section)
.br
• \fBmixed-encodings\fR - Unicode homograph attacks (see mixed-encodings section)
.br
.br
\fBWhy lookalike is the default:\fR This bundle represents the most dangerous and commonly used techniques in real-world attacks. These transformations are specifically chosen because they:
.br
• Create domains that look nearly identical to the original
.br
• Are difficult for users to spot, especially on mobile devices
.br
• Require no technical sophistication from attackers
.br
• Have high success rates in phishing campaigns
.br
• Cover both automated (typos, fat-finger) and intentional (1337speak, homographs) attack vectors
.br
.br
For detailed explanations and examples of each transformation, see the individual transformation sections below.



.SH MODES OF OPERATION

.SS Combo Mode (Default)
In combo mode, multiple transformations are applied sequentially to create complex variations. Each generated domain goes through 2-5 random transformations from the enabled set, creating sophisticated combinations that simulate real-world attack scenarios.

.SS One-Transformation Mode (-1)
In one-transformation mode, each enabled transformation is applied individually to the original domain. This mode is useful for understanding the specific impact of each transformation type and for systematic analysis.

.SH OUTPUT FORMAT
The output format varies depending on options:

.TP
.B Basic Output
Each line contains a domain variation.

.TP
.B With Similarity Scoring
Format: \fISIMILARITY_SCORE\fR, \fIDOMAIN\fR

.TP
.B With Status Checking
Format: \fISIMILARITY_SCORE\fR, \fIDOMAIN\fR, \fISTATUS\fR
.br
Where STATUS is one of: available, registered, parked, error

.SH SIMILARITY SCORING
When similarity scoring is enabled, domfuzz calculates three types of similarity:

.TP
.B Visual Similarity
Measures how visually similar the variation appears to the original domain using character shape and appearance analysis.

.TP
.B Cognitive Similarity
Measures how mentally similar the variation is using phonetic analysis and semantic meaning.

.TP
.B Combined Score
A weighted combination of visual and cognitive similarity scores, providing an overall assessment of how deceptive the variation might be.

.SH EXAMPLES
.TP
Generate all possible variations for example.com:
.B domfuzz example.com

.TP
Generate only character substitution and keyboard variations:
.B domfuzz \-t char\-sub,keyboard example.com

.TP
Check registration status of variations, showing only registered domains:
.B domfuzz \-r example.com

.TP
Generate 50 variations with similarity scoring:
.B domfuzz \-n 50 \-\-similarity example.com

.TP
Run individual transformations with verbose output:
.B domfuzz \-1 \-v \-t misspellings,homoglyphs example.com

.TP
Find highly similar variations (threshold 0.8 or higher):
.B domfuzz \-\-min\-similarity 0.8 \-\-similarity example.com

.TP
Use custom dictionary for combosquatting:
.B domfuzz \-t combosquatting \-\-dictionary /path/to/keywords.txt example.com

.SH SECURITY CONSIDERATIONS
.B domfuzz
is designed for defensive security purposes including:
.IP \(bu 4
Brand protection and monitoring
.IP \(bu 4
Phishing awareness and training
.IP \(bu 4
Domain registration defense
.IP \(bu 4
Security research and analysis

The tool should be used responsibly and in accordance with applicable laws and regulations. Users should not use generated domains for malicious purposes such as phishing, fraud, or trademark infringement.

.SH FILES
.TP
.I ~/.local/share/domfuzz/dictionary.txt
Default dictionary file for combosquatting (if exists)

.SH EXIT STATUS
.B domfuzz
exits with status 0 on success, and >0 if an error occurs.

.SH BUGS
Report bugs at: https://github.com/example/domfuzz/issues

.SH AUTHOR
Written by Albert Hui <albert@securityronin.com> for defensive security research and brand protection purposes.

.SH COPYRIGHT
Copyright (c) 2025 Albert Hui <albert@securityronin.com>
.br
This software is released under the MIT License.
.br
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
.br
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
.br
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.br
For the complete license text, see the LICENSE file distributed with this software.

.SH SEE ALSO
.BR whois (1),
.BR dig (1),
.BR nslookup (1)