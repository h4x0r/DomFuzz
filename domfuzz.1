.TH DOMFUZZ 1 "2024" "domfuzz 0.1.1" "Domain Fuzzing Tool"
.SH NAME
domfuzz \- generate domain name variations using typosquatting techniques
.SH SYNOPSIS
.B domfuzz
[\fIOPTIONS\fR] \fIDOMAIN\fR
.SH DESCRIPTION
.B domfuzz
is a comprehensive domain name variation generator that uses advanced typosquatting techniques to create potential malicious domain variations. It implements 22 different transformation algorithms organized into logical categories to simulate how attackers might create lookalike domains for phishing, brand impersonation, and other malicious activities.

The tool operates in two modes: one-transformation mode (default) where each algorithm is applied individually, and combo mode where transformations are chained together to create complex variations. Results can include similarity scoring, domain availability checking, and filtering by registration status.

.SH OPTIONS
.TP
.B \-t, \-\-transformation \fITRANSFORMATION\fR
Specify transformations to enable (comma-separated). Use 'all' for all transformations. If not specified, the common bundle is enabled by default.
.TP
.B \-n, \-\-max\-variations \fINUMBER\fR
Limit the maximum number of variations to output.
.TP
.B \-s, \-\-check\-status
Check domain availability status (requires network connectivity).
.TP
.B \-r, \-\-only\-registered
Output only domains that are registered (not available). Implies \-\-check\-status.
.TP
.B \-\-dictionary \fIFILE\fR
Path to dictionary file for combosquatting transformations.
.TP
.B \-1, \-\-one\-transformation
Run transformations in combo mode where multiple transformations are chained together on the same domain to create more complex variations. By default, domfuzz runs in one-transformation mode where each transformation is applied individually.
.TP
.B \-v, \-\-verbose
Enable verbose output showing transformation details and generation process.
.TP
.B \-\-similarity
Calculate and display similarity scores for generated variations.
.TP
.B \-\-min\-similarity \fITHRESHOLD\fR
Filter results to minimum similarity threshold (0.0-1.0).
.TP
.B \-h, \-\-help
Print help information.

.SH TRANSFORMATION ALGORITHMS
.B domfuzz
implements 22 different transformation algorithms organized into logical categories:

.SS Character-Level Transformations
Advanced character-level modifications that create visually similar domains. These transformations can be used individually with \fB-t transformation_name\fR or as part of the lookalike bundle (default):

.TP
.B 1337speak
Creates lookalike domains by replacing letters with visually similar numbers and symbols, mimicking internet "leet speak" culture. This is one of the most effective visual deception techniques used in real typosquatting attacks.

\fBHow it works:\fR Systematically replaces common letters with their visual lookalikes - 'o' becomes '0', 'l' becomes '1', 'e' becomes '3', etc. Can apply single or multiple replacements depending on domain length.

\fBReal examples:\fR
.br
google.com →
.br
  g00gle.com (both o's become 0's)
.br
  goog1e.com (l becomes 1)
.br
  googl3.com (e becomes 3)
.br
  g0og13.com (multiple substitutions)
.br
.br
paypal.com →
.br
  payp4l.com (a becomes 4)
.br
  p4ypal.com (a becomes 4)
.br
  p4yp4l.com (both a's become 4's)
.br
.br
microsoft.com →
.br
  micr0soft.com (o becomes 0)
.br
  microso7t.com (f becomes 7, t becomes 7)
.br
  micr050f7.com (multiple substitutions)

\fBWhy it's effective:\fR These substitutions look nearly identical in most fonts, especially at small sizes or when users are browsing quickly. Attack success rates are very high because users often don't notice the differences.

\fBCharacter substitutions:\fR
.br
\fBClassic numeric leet:\fR
.br
• o/O → 0 (most effective - looks identical)
.br
• l/L → 1 (perfect match in most fonts)  
.br
• i/I → 1 (minimal visual difference)
.br
• e/E → 3 (mirror image resemblance)
.br
• a/A → 4 (triangular shape similarity)
.br
• s/S → 5 (curved shape approximation)
.br
• g/G → 9 (rotational similarity)
.br
• t/T → 7 (cross-stroke similarity)
.br
• b/B → 6 (shape approximation)
.br
• z/Z → 2 (angular similarity)
.br
.br
\fBAdvanced symbol leet (filtered out for DNS):\fR
.br
• a/A → @ (at symbol - classic leet)
.br
• i/I → ! (exclamation mark)
.br
• s/S → $ (dollar sign)
.br
• h/H → # (hash symbol)
.br
• c/C → ( (opening parenthesis)
.br
• e/E → € (euro symbol)
.br
• Multi-char: w → vv, m → /\/\, u → |_|
.br
.br
\fBDNS filtering:\fR Advanced symbols are generated but filtered out since DNS only allows alphanumeric characters. This provides comprehensive leet generation while maintaining valid domain output.

.TP
.B misspelling
Generates domains based on common typing mistakes people make when entering URLs. Models realistic human errors like typos, character swaps, missing letters, and extra keystrokes that happen during normal typing.

\fBHow it works:\fR Simulates the most common typing errors: accidentally hitting adjacent keys, swapping letter order, adding extra characters, or missing keystrokes entirely. Focuses on errors that actually happen when people type quickly.

\fBReal examples:\fR
.br
google.com →
.br
  gogle.com (missing second 'o')
.br
  goggle.com (extra 'g')
.br
  googel.com (swapped 'l' and 'e')
.br
  goofle.com (adjacent key: 'g' instead of 'g')
.br
  googke.com (adjacent key: 'k' instead of 'l')
.br
.br
facebook.com →
.br
  facbook.com (missing 'e')
.br
  facebok.com (missing 'o')
.br
  facenook.com (extra letters)
.br
  gacebook.com (adjacent key: 'g' instead of 'f')
.br
  favebook.com (adjacent key: 'v' instead of 'c')
.br
.br
amazon.com →
.br
  amzon.com (missing 'a')
.br
  amazom.com (adjacent key: 'm' instead of 'n')
.br
  amaozn.com (swapped 'z' and 'o')
.br
  qmazon.com (adjacent key: 'q' instead of 'a')

\fBTypes of errors simulated:\fR
.br
• \fBMissing letters:\fR paypal.com → paypl.com
.br
• \fBExtra letters:\fR google.com → googgle.com
.br
• \fBSwapped letters:\fR amazon.com → amaozn.com
.br
• \fBAdjacent keys:\fR (keys next to target on keyboard)
.br
  - twitter.com → rwitter.com ('r' next to 't')
.br
  - apple.com → appke.com ('k' next to 'l')
.br
• \fBVowel confusion:\fR Similar-sounding vowels
.br
  - secure.com → sacure.com ('a' sounds like 'e')

\fBWhy it's effective:\fR These are genuine mistakes people make every day. Users might not realize they mistyped and assume they reached the correct site, especially if the fake site looks legitimate.

.TP
.B fat-finger
Simulates "fat finger" typing errors where users accidentally press wrong keys due to finger placement mistakes, especially on mobile devices or when typing quickly. Models the most common accidental keypresses based on physical keyboard layout.

\fBHow it works:\fR Generates variations by replacing characters with keys that are physically adjacent on a QWERTY keyboard. Also simulates repeated characters from keys being pressed too long or bouncing.

\fBReal examples:\fR
.br
google.com →
.br
  foogle.com ('f' is next to 'g')
.br
  hoogle.com ('h' is next to 'g')  
.br
  gpople.com ('p' is next to 'o')
.br
  googke.com ('k' is next to 'l')
.br
  googld.com ('d' is below 'e')
.br
  gooogle.com (extra 'o' from key sticking)
.br
  googlle.com (extra 'l' from key bounce)
.br
.br
paypal.com →
.br
  oaypal.com ('o' is next to 'p')
.br
  psypal.com ('s' is next to 'a')
.br
  paypsl.com ('s' is next to 'a')  
.br
  paypak.com ('k' is next to 'l')
.br
  ppaypal.com (repeated 'p')
.br
  paaypal.com (repeated 'a')
.br
.br
twitter.com →
.br
  rwitter.com ('r' is next to 't')
.br
  tuitter.com ('u' is next to 'i')
.br
  twitrer.com ('r' is next to 't')
.br
  twitterr.com (extra 'r' at end)

\fBTypes of fat-finger errors:\fR
.br
• \fBAdjacent keys:\fR Keys physically next to target
.br
  - Horizontal: q→w, a→s, z→x
.br
  - Vertical: q→a, w→s, e→d  
.br
  - Diagonal: q→s, w→a, e→s
.br
• \fBRepeated characters:\fR Key pressed too long
.br
  - google.com → gooogle.com
.br
  - apple.com → appple.com
.br
• \fBMultiple keys:\fR Two keys pressed at once
.br
  - Often happens with 'gh', 'ty', 'ui' combinations

\fBWhy it's effective:\fR These errors happen naturally, especially on mobile devices where keys are small. Users recognize the mistake but might not notice if they've landed on a malicious lookalike site.

\fBMost vulnerable keys:\fR Keys in the center of the keyboard (g, h, t, y, u, i) have more adjacent neighbors and are more prone to fat-finger errors.

.TP
.B mixed-encodings
Creates deceptive domains using Unicode characters that look identical to regular letters but are actually from different alphabets (like Cyrillic, Greek, or Armenian). These "homograph attacks" can create domains that appear pixel-perfect identical to legitimate sites.

\fBHow it works:\fR Replaces regular Latin letters (a-z) with visually identical characters from other Unicode scripts. The resulting domains look exactly the same but have different underlying character codes, making them technically different domains.

\fBReal examples:\fR
.br
google.com →
.br
  gооgle.com (Cyrillic 'о' instead of Latin 'o')
.br
  googlе.com (Cyrillic 'е' instead of Latin 'e')  
.br
  gοοgle.com (Greek 'ο' instead of Latin 'o')
.br
  gооglе.com (mixed Cyrillic 'о' and 'е')
.br
.br
paypal.com →
.br
  рaypal.com (Cyrillic 'р' looks like Latin 'p')
.br
  pаypal.com (Cyrillic 'а' looks like Latin 'a')
.br
  paуpal.com (Cyrillic 'у' looks like Latin 'y')
.br
  рауpal.com (multiple Cyrillic substitutions)
.br
.br
apple.com →
.br
  аpple.com (Cyrillic 'а' looks like Latin 'a')
.br
  apрle.com (Cyrillic 'р' looks like Latin 'p')
.br
  аррle.com (multiple Cyrillic 'р's)

\fBMost effective character substitutions:\fR
.br
• \fBPerfect matches (100% identical):\fR
.br
  - a → а (Cyrillic, U+0430)
.br
  - e → е (Cyrillic, U+0435)  
.br
  - o → о (Cyrillic, U+043E)
.br
  - p → р (Cyrillic, U+0440)
.br
  - c → с (Cyrillic, U+0441)
.br
  - x → х (Cyrillic, U+0445)
.br
• \fBNear-perfect matches (99% similar):\fR
.br
  - o → ο (Greek omicron, U+03BF)
.br
  - i → ι (Greek iota, U+03B9)
.br
  - y → у (Cyrillic, U+0443)

\fBWhy it's extremely dangerous:\fR
.br
• \fBInvisible to users:\fR Domains look completely identical
.br
• \fBBypass filters:\fR Many security tools don't catch these
.br
• \fBValid domains:\fR Browsers accept them as legitimate URLs
.br
• \fBSSL certificates:\fR Can get valid certificates for fake domains

\fBDetection difficulty:\fR These attacks are nearly impossible to detect visually. Users need special tools to see the Unicode differences, making them extremely effective for phishing attacks.

.TP
.B bitsquatting
Generates domain variations caused by single bit-flip errors in computer memory, network transmission, or storage systems. Models hardware failures that can redirect users to different domains when digital systems malfunction.

\fBHow it works:\fR Takes each character in a domain and systematically flips individual bits in its binary representation, creating variations that result from hardware errors like cosmic ray strikes, memory corruption, or transmission errors.

\fBReal examples:\fR
.br
google.com →
.br
  foogle.com ('g' bit-flip: 01100111 → 01100110 = 'f')
.br
  coogle.com ('g' bit-flip: 01100111 → 01100011 = 'c')
.br
  gkogle.com ('o' bit-flip: 01101111 → 01101011 = 'k')
.br
  googme.com ('l' bit-flip: 01101100 → 01101101 = 'm')
.br
  googlu.com ('e' bit-flip: 01100101 → 01110101 = 'u')
.br
.br
paypal.com →
.br
  qaypal.com ('p' bit-flip: 01110000 → 01110001 = 'q')
.br
  pcypal.com ('a' bit-flip: 01100001 → 01100011 = 'c')
.br
  payqal.com ('p' bit-flip: 01110000 → 01110001 = 'q')
.br
  paypam.com ('l' bit-flip: 01101100 → 01101101 = 'm')
.br
.br
amazon.com →
.br
  cmazon.com ('a' bit-flip: 01100001 → 01100011 = 'c')
.br
  ✗ amAzon.com ('a' bit-flip to 'A' - discarded, case-insensitive)
.br
  amazoo.com ('n' bit-flip: 01101110 → 01101111 = 'o')
.br
  amarons.com ('z' bit-flip: 01111010 → 01110010 = 'r')

\fBWhen bit-flips happen:\fR
.br
• \fBMemory errors:\fR RAM corruption from cosmic rays or electrical interference
.br
• \fBNetwork transmission:\fR Data corruption during internet transmission  
.br
• \fBStorage failures:\fR Hard drive or SSD bit corruption over time
.br
• \fBProcessor errors:\fR CPU cache corruption during high-stress operation

\fBDomain Name Case Sensitivity:\fR
.br
Domain names are case-insensitive (google.com = Google.com = GOOGLE.com), so bit-flips that only change letter case produce identical domains and are discarded.

\fBHow each character can change:\fR
.br
Every letter has exactly 8 possible bit-flips (one for each bit position):
.br
• 'a' (01100001) can become: c, e, i, q, ✗A (case change - discarded)
.br
• 'e' (01100101) can become: d, g, a, m, u, ✗E (case change - discarded)  
.br
• 'o' (01101111) can become: n, m, k, g, ✗O (case change - discarded)
.br
• 'g' (01100111) can become: f, e, c, o, w, ✗G (case change - discarded)

\fBWhy it matters:\fR
.br
• \fBReal hardware phenomenon:\fR These errors actually occur in computer systems
.br
• \fBDifficult to detect:\fR Users might not notice single character changes
.br
• \fBSystematic coverage:\fR Generates all possible single-bit variations
.br
• \fBHigh-altitude risk:\fR More common in aircraft, spacecraft, or high-elevation systems

\fBMost common bit-flip positions:\fR Lower-order bits (positions 0-2) are most vulnerable to errors, while higher-order bits (positions 6-7) are more stable but cause dramatic character changes when they flip.

.SH MODES OF OPERATION

.SS Combo Mode (Default)
In combo mode, multiple transformations are applied sequentially to create complex variations. Each generated domain goes through 2-5 random transformations from the enabled set, creating sophisticated combinations that simulate real-world attack scenarios.

.SS One-Transformation Mode (-1)
In one-transformation mode, each enabled transformation is applied individually to the original domain. This mode is useful for understanding the specific impact of each transformation type and for systematic analysis.

.SH OUTPUT FORMAT
The output format varies depending on options:

.TP
.B Basic Output
Each line contains a domain variation.

.TP
.B With Similarity Scoring
Format: \fISIMILARITY_SCORE\fR, \fIDOMAIN\fR

.TP
.B With Status Checking
Format: \fISIMILARITY_SCORE\fR, \fIDOMAIN\fR, \fISTATUS\fR
.br
Where STATUS is one of: available, registered, parked, error

.SH SIMILARITY SCORING
When similarity scoring is enabled, domfuzz calculates three types of similarity:

.TP
.B Visual Similarity
Measures how visually similar the variation appears to the original domain using character shape and appearance analysis.

.TP
.B Cognitive Similarity
Measures how mentally similar the variation is using phonetic analysis and semantic meaning.

.TP
.B Combined Score
A weighted combination of visual and cognitive similarity scores, providing an overall assessment of how deceptive the variation might be.

.SH EXAMPLES
.TP
Generate all possible variations for example.com:
.B domfuzz example.com

.TP
Generate using the lookalike bundle (visual deception only):
.B domfuzz \-t lookalike example.com

.TP
Generate using the error bundle (system and typing errors):
.B domfuzz \-t error example.com

.TP
Generate only specific individual transformations:
.B domfuzz \-t 1337speak,bitsquatting example.com

.TP
Check registration status of variations, showing only registered domains:
.B domfuzz \-r example.com

.TP
Generate 50 variations with similarity scoring:
.B domfuzz \-n 50 \-\-similarity example.com

.TP
Run individual transformations with verbose output:
.B domfuzz \-1 \-v \-t misspelling,mixed-encodings example.com

.TP
Find highly similar variations (threshold 0.8 or higher):
.B domfuzz \-\-min\-similarity 0.8 \-\-similarity example.com

.TP
Use custom dictionary for combosquatting:
.B domfuzz \-t combosquatting \-\-dictionary /path/to/keywords.txt example.com

.TP
Use all available transformations:
.B domfuzz \-t all example.com

.SH SECURITY CONSIDERATIONS
.B domfuzz
is designed for defensive security purposes including:
.IP \(bu 4
Brand protection and monitoring
.IP \(bu 4
Phishing awareness and training
.IP \(bu 4
Domain registration defense
.IP \(bu 4
Security research and analysis

The tool should be used responsibly and in accordance with applicable laws and regulations. Users should not use generated domains for malicious purposes such as phishing, fraud, or trademark infringement.

.SH FILES
.TP
.I ~/.local/share/domfuzz/dictionary.txt
Default dictionary file for combosquatting (if exists)

.SH EXIT STATUS
.B domfuzz
exits with status 0 on success, and >0 if an error occurs.

.SH BUGS
Report bugs at: https://github.com/example/domfuzz/issues

.SH AUTHOR
Written by Albert Hui <albert@securityronin.com> for defensive security research and brand protection purposes.

.SH COPYRIGHT
Copyright (c) 2025 Albert Hui <albert@securityronin.com>
.br
This software is released under the MIT License.
.br
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
.br
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
.br
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.br
For the complete license text, see the LICENSE file distributed with this software.

.SH SEE ALSO
.BR whois (1),
.BR dig (1),
.BR nslookup (1)