#!/bin/bash

# Pre-push hook for DomFuzz
# Validates code quality, security, and GitHub Actions before pushing to remote

echo "üîç Running pre-push validation checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Track if any checks fail
FAILED=0

print_status $BLUE "üìã Pre-push validation started"
echo

# 1. Cargo Format Check
print_status $YELLOW "üé® Checking code formatting (cargo fmt)..."
if cargo fmt --all -- --check; then
    print_status $GREEN "‚úÖ Code formatting is correct"
else
    print_status $RED "‚ùå Code formatting issues found"
    echo "   Run: cargo fmt --all"
    FAILED=1
fi
echo

# 2. Cargo Clippy Check
print_status $YELLOW "üîß Running linting checks (cargo clippy)..."
if cargo clippy --all-targets --all-features -- -D warnings; then
    print_status $GREEN "‚úÖ No clippy warnings found"
else
    print_status $RED "‚ùå Clippy warnings found"
    echo "   Fix warnings before pushing"
    FAILED=1
fi
echo

# 3. Cargo Audit Check
print_status $YELLOW "üõ°Ô∏è Running security audit (cargo audit)..."
if cargo audit; then
    print_status $GREEN "‚úÖ No security vulnerabilities found"
else
    print_status $RED "‚ùå Security vulnerabilities found"
    echo "   Run: cargo audit fix"
    FAILED=1
fi
echo

# 4. Test Suite
print_status $YELLOW "üß™ Running test suite..."
if cargo test --all; then
    print_status $GREEN "‚úÖ All tests passed"
else
    print_status $RED "‚ùå Tests failed"
    echo "   Fix failing tests before pushing"
    FAILED=1
fi
echo

# 5. Build Check
print_status $YELLOW "üî® Verifying build succeeds..."
if cargo build --release; then
    print_status $GREEN "‚úÖ Release build successful"
else
    print_status $RED "‚ùå Release build failed"
    echo "   Fix build errors before pushing"
    FAILED=1
fi
echo

# 6. GitHub Actions SHA Pinning Check
print_status $YELLOW "üìå Checking GitHub Actions SHA pinning..."
if command -v pin-github-action &> /dev/null; then
    # Check if any workflow files contain version tags instead of SHA hashes
    if grep -r '@v[0-9]' .github/workflows/ >/dev/null 2>&1 || \
       grep -r '@[0-9]\+\.[0-9]\+' .github/workflows/ >/dev/null 2>&1; then
        print_status $RED "‚ùå Some GitHub Actions use version tags instead of SHA hashes"
        echo "   Found version tags in workflow files:"
        grep -r '@v[0-9]' .github/workflows/ 2>/dev/null || true
        grep -r '@[0-9]\+\.[0-9]\+' .github/workflows/ 2>/dev/null || true
        echo "   Run: pin-github-action .github/workflows/*.yml"
        echo "   Or: ./scripts/update-action-pins.sh"
        FAILED=1
    else
        print_status $GREEN "‚úÖ All GitHub Actions appear to be SHA pinned"
    fi
else
    print_status $YELLOW "‚ö†Ô∏è pin-github-action not found - skipping SHA pinning check"
    echo "   Install: npm install -g pin-github-action"
fi
echo

# 7. Commit Signing Check (if gitsign is configured)
if git config --get gpg.format | grep -q "x509"; then
    print_status $YELLOW "üîê Checking Sigstore commit signing..."
    if git log --show-signature -1 HEAD 2>&1 | grep -q "gitsign: Good signature"; then
        print_status $GREEN "‚úÖ Latest commit is Sigstore signed"
    else
        print_status $YELLOW "‚ö†Ô∏è Latest commit is not Sigstore signed"
        echo "   Commits should be signed with gitsign for security"
        # Don't fail on this - it's a warning
    fi
    echo
fi

# Summary
if [ $FAILED -eq 0 ]; then
    print_status $GREEN "üéâ All pre-push checks passed! Pushing to remote..."
    echo
    print_status $BLUE "üì§ Push will proceed"
else
    print_status $RED "üí• Pre-push validation failed!"
    echo
    print_status $RED "‚ùå Push blocked - fix the issues above before pushing"
    echo
    echo "Quick fixes:"
    echo "  ‚Ä¢ Format: cargo fmt --all"  
    echo "  ‚Ä¢ Lint: cargo clippy --all-targets --all-features --fix"
    echo "  ‚Ä¢ Security: cargo audit fix"
    echo "  ‚Ä¢ Actions: ./scripts/update-action-pins.sh"
    echo
    exit 1
fi

exit 0